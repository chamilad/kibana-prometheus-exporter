---
name: release-on-tag-creation
run-name: Creating a release on ${{ github.ref_name }} ${{ github.ref_type }}
on:
  push:
    tags:
      - "**"

env:
  GOOS: linux
  GOARCH: amd64
  # net/http might need disabling CGO
  CGO_ENABLED: 0
  BINARY_NAME: kibana_exporter
  IMAGE_NAME: kibana-prometheus-exporter

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/composite-linter

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Dependencies
        run: go get .

      - name: Test
        run: go test -v ./...

  build-and-sign:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Dependencies
        run: go get .

      - name: Extract tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Build on tag ${{ steps.vars.outputs.tag }}
        env:
          TAG_NAME: ${{ steps.vars.outputs.tag }}
        run: |
          mkdir -p outputs/
          go build -ldflags "-extldflags '-static' -s -w" -a -o outputs/${{ env.BINARY_NAME }}-${TAG_NAME}-${GOOS}-${GOARCH}

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Cosign version
        run: cosign version

      - name: Get cosign signing key
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
        run: |
          echo "${COSIGN_KEY}" > cosign.key

      - name: Sign the binary
        env:
          TAG_NAME: ${{ steps.vars.outputs.tag }}
        run: |
          cosign sign-blob --key cosign.key --yes outputs/${{ env.BINARY_NAME }}-${TAG_NAME}-${GOOS}-${GOARCH} --output-signature outputs/${{ env.BINARY_NAME }}-${TAG_NAME}-${GOOS}-${GOARCH}.sig

      - name: Upload build artefact
        uses: actions/upload-artifact@v3
        with:
          path: outputs/${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}
          name: ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}

      - name: Upload signature artefact
        uses: actions/upload-artifact@v3
        with:
          path: outputs/${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}.sig
          name: ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}.sig

  dilligence:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Extract tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Generate SBOM
        env:
          TAG_NAME: ${{ steps.vars.outputs.tag }}
        run: |
          wget https://github.com/opensbom-generator/spdx-sbom-generator/releases/download/v0.0.15/spdx-sbom-generator-v0.0.15-linux-amd64.tar.gz
          tar zxvf spdx-sbom-generator-v0.0.15-linux-amd64.tar.gz
          mkdir outputs
          ./spdx-sbom-generator -i -f spdx -o outputs/sbom-${TAG_NAME}.spdx
          ./spdx-sbom-generator -i -f json -o outputs/sbom-${TAG_NAME}.json

      - name: Upload sbom spdx artefact
        uses: actions/upload-artifact@v3
        with:
          path: outputs/sbom-${{ steps.vars.outputs.tag }}.spdx
          name: sbom-${{ steps.vars.outputs.tag }}.spdx

      - name: Upload sbom json artefact
        uses: actions/upload-artifact@v3
        with:
          path: outputs/sbom-${{ steps.vars.outputs.tag }}.json
          name: sbom-${{ steps.vars.outputs.tag }}.json

  build-image-and-sign:
    runs-on: ubuntu-latest
    needs:
      - build-and-sign
      - dilligence
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v3

      - name: Extract tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Docker hub login
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}
          path: build/release/${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          build-args: |
            BINARY=${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}
          push: true
          tags: |
            chamilad/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}
            ghcr.io/chamilad/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Cosign version
        run: cosign version

      - name: Get cosign signing key
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
        run: |
          echo "${COSIGN_KEY}" > cosign.key

      - name: Sign the images
        env:
          TAG_NAME: ${{ steps.vars.outputs.tag }}
        run: |
          cosign sign --key cosign.key --yes chamilad/${IMAGE_NAME}:${TAG_NAME}
          cosign sign --key cosign.key --yes ghcr.io/chamilad/${IMAGE_NAME}:${TAG_NAME}

  release:
    runs-on: ubuntu-latest
    needs:
      - dilligence
      - build-and-sign
    permissions:
      contents: write
      actions: read

    steps:
      - uses: actions/checkout@v3

      - name: Extract tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}

      - name: Download signature artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}.sig

      - name: Download sbom spdx artifact
        uses: actions/download-artifact@v3
        with:
          name: sbom-${{ steps.vars.outputs.tag }}.spdx

      - name: Download sbom json artifact
        uses: actions/download-artifact@v3
        with:
          name: sbom-${{ steps.vars.outputs.tag }}.json

      - name: Get cosign pub key
        env:
          COSIGN_PUB: ${{ secrets.COSIGN_PUB }}
          TAG_NAME: ${{ steps.vars.outputs.tag }}
        run: |
          echo "${COSIGN_PUB}" > cosign-${TAG_NAME}.pub

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: Release ${{ steps.vars.outputs.tag }}
          body: |
            \<auto generated, will be replaced pretty soon with good stuff\>

            ## Docker Images
            Docker images are available in the following registries.

            ```bash
            # docker hub
            docker pull chamilad/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}

            # github container registry
            docker pull ghcr.io/chamilad/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}
            ```

            ## Verification
            The binary and the Docker images are signed with [Sigstore Cosign](https://docs.sigstore.dev/main-concepts/). The public key
            is available in the release artefacts as `cosign-${{ steps.vars.outputs.tag }}.pub`.

            [Install `cosign`](https://docs.sigstore.dev/cosign/installation/) and use the following commands on Linux to verify the binaries and the images.

            ```bash
            # download the binary, signature, and the public key
            wget https://github.com/chamilad/kibana-prometheus-exporter/releases/download/${{ steps.vars.outputs.tag }}/${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}
            wget https://github.com/chamilad/kibana-prometheus-exporter/releases/download/${{ steps.vars.outputs.tag }}/${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}.sig
            wget https://github.com/chamilad/kibana-prometheus-exporter/releases/download/${{ steps.vars.outputs.tag }}/cosign-${{ steps.vars.outputs.tag }}.pub

            # verify the images and the binary
            cosign verify --key cosign-${{ steps.vars.outputs.tag }}.pub chamilad/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}
            cosign verify --key cosign-${{ steps.vars.outputs.tag }}.pub ghcr.io/chamilad/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}
            cosign verify-blob --key cosign-${{ steps.vars.outputs.tag }}.pub --signature ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}.sig ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}
            ```

            ## Usage
            Refer to the [README.md ](README.md) for the usage details.
          files: |
            ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}
            ${{ env.BINARY_NAME }}-${{ steps.vars.outputs.tag }}-${{ env.GOOS }}-${{ env.GOARCH }}.sig
            cosign-${{ steps.vars.outputs.tag }}.pub
            sbom-${{ steps.vars.outputs.tag }}.json
            sbom-${{ steps.vars.outputs.tag }}.spdx
